<?php

namespace App\Imports;

use App\Models\Barang;
use App\Models\User;
use Maatwebsite\Excel\Concerns\ToCollection;
use Maatwebsite\Excel\Concerns\WithHeadingRow;
use Maatwebsite\Excel\Concerns\WithChunkReading;
use Maatwebsite\Excel\Concerns\Importable;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Hash;

class BarangImportSuperFast implements ToCollection, WithHeadingRow, WithChunkReading
{
    use Importable;

    private $rowCount = 0;
    private $successCount = 0;
    private $updateCount = 0;
    private $skipCount = 0;
    private $userCache = [];
    private $createdUsers = 0;
    private $existingCodes = [];

    public function collection(Collection $rows)
    {
        $this->rowCount += $rows->count();
        
        Log::info("Processing chunk of {$rows->count()} rows");
        
        // Only do setup once
        if (empty($this->userCache)) {
            $this->setupImport($rows);
        }
        
        // Process this chunk
        $this->processChunk($rows);
        
        // Clear memory
        $rows = null;
        gc_collect_cycles();
    }
    
    private function setupImport(Collection $firstChunk)
    {
        Log::info("=== SETUP IMPORT ===");
        
        // Get all unique user_ids from first chunk (assume all chunks have same users)
        $allRows = collect();
        
        // We need to read the full file once to get all unique users
        // This is a limitation, but necessary for user creation
        Log::info("Reading full file for user analysis...");
        
        // Cache existing barang codes for faster lookup
        $this->existingCodes = Barang::pluck('kode')->flip()->toArray();
        Log::info("Cached " . count($this->existingCodes) . " existing barang codes");
        
        // Cache users
        $this->cacheUsers();
    }
    
    private function cacheUsers()
    {
        Log::info("Caching users...");
        
        $users = User::select('id', 'name')->get();
        foreach ($users as $user) {
            $this->userCache[$user->name] = $user->id;
            $this->userCache[strtolower($user->name)] = $user->id;
            $this->userCache[strtoupper($user->name)] = $user->id;
        }
        
        Log::info("Cached " . count($users) . " users");
    }
    
    private function processChunk(Collection $rows)
    {
        $insertData = [];
        $updateData = [];
        
        foreach ($rows as $row) {
            try {
                $kode = trim($row['kode'] ?? '');
                $nama = trim($row['nama'] ?? '');
                $userIdFromExcel = trim($row['user_id'] ?? '');
                
                if (empty($kode) || empty($nama)) {
                    $this->skipCount++;
                    continue;
                }
                
                // Create user if not exists (inline)
                $userId = $this->getOrCreateUserId($userIdFromExcel);
                if (!$userId) {
                    $this->skipCount++;
                    continue;
                }
                
                $data = [
                    'kode' => $kode,
                    'nama' => $nama,
                    'does_pcs' => $this->parseNumeric($row['does_pcs'] ?? 1),
                    'golongan' => trim($row['golongan'] ?? 'GENERAL'),
                    'hbeli' => $this->parseNumeric($row['hbeli'] ?? 0),
                    'user_id' => $userId,
                    'keterangan' => trim($row['keterangan'] ?? ''),
                ];
                
                if (isset($this->existingCodes[$kode])) {
                    $updateData[] = $data;
                } else {
                    $data['created_at'] = now();
                    $data['updated_at'] = now();
                    $insertData[] = $data;
                    // Add to cache to avoid duplicates in same import
                    $this->existingCodes[$kode] = true;
                }
                
            } catch (\Exception $e) {
                Log::error("Error processing row: " . $e->getMessage());
                $this->skipCount++;
            }
        }
        
        // Bulk operations
        if (!empty($insertData)) {
            DB::table('barang')->insert($insertData);
            $this->successCount += count($insertData);
            Log::info("Inserted " . count($insertData) . " records");
        }
        
        if (!empty($updateData)) {
            foreach ($updateData as $data) {
                DB::table('barang')
                    ->where('kode', $data['kode'])
                    ->update([
                        'nama' => $data['nama'],
                        'does_pcs' => $data['does_pcs'],
                        'golongan' => $data['golongan'],
                        'hbeli' => $data['hbeli'],
                        'user_id' => $data['user_id'],
                        'keterangan' => $data['keterangan'],
                        'updated_at' => now(),
                    ]);
            }
            $this->updateCount += count($updateData);
            Log::info("Updated " . count($updateData) . " records");
        }
    }
    
    private function getOrCreateUserId($username)
    {
        if (empty($username)) {
            return auth()->id();
        }
        
        // Check cache first
        if (isset($this->userCache[$username])) {
            return $this->userCache[$username];
        }
        
        // Create user inline
        try {
            $user = User::create([
                'name' => $username,
                'email' => strtolower($username) . '@example.com',
                'password' => Hash::make('password123'),
                'email_verified_at' => now(),
            ]);
            
            // Add to cache
            $this->userCache[$username] = $user->id;
            $this->userCache[strtolower($username)] = $user->id;
            $this->userCache[strtoupper($username)] = $user->id;
            
            $this->createdUsers++;
            Log::info("Created user: {$username}");
            
            return $user->id;
            
        } catch (\Exception $e) {
            Log::error("Failed to create user {$username}: " . $e->getMessage());
            return null;
        }
    }
    
    public function chunkSize(): int
    {
        return 50; // Process 50 rows at a time to manage memory
    }
    
    // Getters
    public function getRowCount(): int { return $this->rowCount; }
    public function getSuccessCount(): int { return $this->successCount + $this->updateCount; }
    public function getCreateCount(): int { return $this->successCount; }
    public function getUpdateCount(): int { return $this->updateCount; }
    public function getSkipCount(): int { return $this->skipCount; }
    public function getCreatedUsersCount(): int { return $this->createdUsers; }

    private function parseNumeric($value)
    {
        if (is_numeric($value)) {
            return floatval($value);
        }
        
        $cleaned = str_replace(',', '', $value);
        $cleaned = preg_replace('/[^\d.-]/', '', $cleaned);
        
        return is_numeric($cleaned) ? floatval($cleaned) : 0;
    }
}